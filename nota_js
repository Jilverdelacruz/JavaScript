Consolas
console.warn('prueba')
console.error('prueba')
console.clear();
VARIABLES
var  prueba = 'prueba'  --  Se cambiar cambiar el contenido de la variab
     prueba = 'prueba2'
     ejem2:
     var prueba = 'a',
         prueba1='b',
         prueba3='c';
let prueba = 'prueba ' tambien se puede reasignar valor
const prueba = 'prueba' Siempte tienen que iniciar con un valor, no se puede reasignar valor
METDOS STRING

DIFERENCIA ENTRE UN METODO Y FUNCION 
console.log(pasrseInt(numero1)) : esto es una funcion
consele.log(numero1.toString()) : esto es un método

console.log(producto.length) : contabilizar caracteres
console.log(producto.indexOf('prueba')) : Indica en que posisicón empie la palabra
console.log(producto.includes('prueba')) : si incluye o no el contenido
console.log('la fruta' + producto + 'cuyo precio es ' + precio) : concatenar
console.log(producto.concat(precio))   : concatenar
console.log(`hola mundo ${producto}`)  :concatenar  se llama template string
console.log(producto.trim())   : elimina espacio derecha izquierda
console.log(producto.trimEnd()) : elimina espacio derecha 
console.log(producto.trimStart()) : elimina espacio izquierda
console.log(producto.replace('nueva', 'rica'))  : reemplaza la palabra
console.log(precio.slice(0, 5))   : captura las letras segun la posisción idncada pero no funciona si primero poner el numero menor
console.log(precio.substring(5, 0)) captura las letras segun la posisción idncada y si funciona si primero poner el numero menor
console.log(precio.charAt(1)) : captura la posición de la letra
const promocion = oferta.repeat(3) : Repite la cantidad de veces colocada
console.log(precio.split(' ')) : Lista en un arreglo y los divide por lo que colocas en el paréntesis.
console.log(producto.toUpperCase())  : Colocar a mayúscula
console.log(precio.toLowerCase()) : Colocar a minúscula
console.log(numero.toString()) : Convertir número a String
PARA NÚMEROS 
console.log(Math.PI);  : te muestra el valodr de PI
console.log(Math.round(2.6)) : Te redondea a 3
console.log(Math.ceil(2.3)) : te redondea siempre al mayor
console.log(Math.floor(2.3)) : te redondea siempre al menor
console.log(Math.sqrt(numero))  : te saca la raíz
console.log(Math.pow(2,3)) :  valor , exponente
console.log(Math.min( 3, 5, 7)) : el mínimo valor
console.log(Math.max(3, 5, 7)) : máximo valor
console.log(Math.random()) : random
Se está redondeando en un rango deseado
*Primero teniendo en cuenta que el rango usualmente los numero es 0.0222... , multiplicando por 30 lo mucho que llegaría es 29.7, luego  lo redondea al numero menor si es 29.7 sería 29 
console.log(Math.floor(Math.random()*30))
Numeros
si colocas .3 = 3/100
var numeros = (40 + 30 + 30 + 50) * .20 // hallamso le 20 por ciento del numero total
numero++; primero te devuelve el mismo valor, recien a la siguiente llamada se aumenta.
++numero; a la primera llamada aumentan
numero +=4 : aumenta 4 más al resultado
console.log(Number.isInteger(numero1)) : Pregunta si es numero resultado boleano
console.log(Number.parseInt(numero1)) : convertir a numero
console.log(Number.parseFloat(numero2)) : converti a decimal
Comparaciones estrictas
numero1 === numero2 :  no solo compara el valor sino el tipo de valor
numero  !== numero2 :   no solo compara el valor sino el tipo de valor
****OBJETO******

Elobjeto viene a tener el valor de varias variables, que se divida entre llave  y valor y todo ello vrendía ser sus propiedades
TOMAR EN CUENTA QUE SI ES UN TIPO DE VARIABLE CONST IGUAL SE PUEDE AGREGAR O QUITAR COMO SI FUERA UNA VARIABLE
let persona= {
    nombre: 'Julio',
    año: 25,
    casado: true
}

persona.menor=true  Podemos aherir una propiedad
delete persona.año  quitar una propiedad

console.log(persona) se muestra todo el OBJETO
console.log(persona.años) se muestra la propiedades del objeto
console.log(persona['años']) se muestra la propiedades del objeto

Como extraer un valor del objeto y colocarlo en una variable
let nombre = persona.nombre : Forma antigua
let {año, casado} = persona  : lo que hace destructuring es todo en uno solo paso utiliza la llave y a la vez le pone dentro de una variable.

Tambien hay un objeto dentro de otoros objetos
let persona= {
    nombre: 'Julio',
    año: 25,
    casado: true,
    esposa:{
      nombrea: 'julia',
      años:26,
      casado:true,
      hijo:{
        nombre: 'patricio',
        edad:10
      },
      hija:{
        nombre: 'maria',
        edad:11
      }
    }
}

De esta manera se aplicaría destructuring
let {nombre, esposa :{hijo, nombrea, hijo : {nombreo}, hija} } = persona  //   si hay un objeto dentor de otro objeto s utiliza :{} como se ve en el ejemplo.
console.log(nombre) aqui saca el valor del objeto y lo coloca en una variable
console.log(nombrea)
console.log(hijo)
console.log(hija)
Para que cumpla el compartmiento de const en un objeto tenemos que congelarlo y ya no pueda ser modificado
'use strict'
const persona = {
    nombre: 'jilver',
    edad:26,
    casado:true
}
Object.freeze(persona) aqui lo congelamos y ya no permitimos que jueguen con su comprtamiento
// persona.hermano= 'juan'
console.log(persona)
console.log(Object.isFrozen(persona))

OTRA OPCION ES SELLARLO, donde no permite ni agregar ni eliminar pero si editar una propiedad
Object.seal(persona)
persona.edad=27
console.log(persona)

 SPREAD OPERATOR fusionar 2 objetos
const personas = Object.assign(persona, persona2) : PERMITE JUNTAR 2 OBJETOS
const personas2 = {...persona, ...persona2} : PERMITE JUNTAR 2 OBJETOS

console.log(Object.keys(persona2)) te retorna  las llaves
console.log(Object.values(persona2)) te reorna valor
console.log(Object.entries(persona2)) te retorna todos los valores en pares

ARREGOS

const paises = ['Peru', 'Bolivia', 'Brasil', 'Colombia',[ 'calle1', 'calle2', 'calle3']]
console.log(paises[4][0])  : el resultado es calle1
cantidadPaises= paises.length
console.log(cantidadPaises) 
 for(let i=0; i<= cantidadPaises; i ++){  // recorrer un arreglo
     console.log(paises[i])
 }

FUNCIONES IMPERATIVAS
personas.push(persona1)  Agregar al final un elemento al arreglo
personas.unshift(persona2)  Agregar al al inicio un elemento al arreglo
FUNCIONES DECLARATIVA NO MODIFICA VARIABLES SINO CREAR OTRA Y TRABAJA CON ELLA ... SPREAD OPERATOR
let resultado = [ ...personas, persona1]; se cre otroa variable y ahi se adhiere los elementos
    resultado=  [persona2, ...resultado]


// frutas.shift()   : elimina el primer elemento
// frutas.pop()     : elimina el último elemento
frutas.splice(1,1)  : eliminar el elemento que se desea // primer parámetro para ver desde conde comienza a eliminar, segundo parámetros cuantos elementos van eliminar 
console.log(frutas)

DESTRUCTURING
const [primero, ...segundo] = frutas : se destructura el arreglo  y lo pasa a una variable, en este ejemplo le estoy diicendo que a partir del segundo valor hasta donde termine lo pase a la variable segundo

// personas.forEach(function(element){ :recorremos un arreglo con el forEach
    //     console.log(element.nombre)
    // })
    const prueba = personas.map(function(elemento){ A diferenci de forEach  map  crea un nuevo arreglo y lo manda a una variable
       return  elemento.apellido
    })
    console.log(prueba)
    

 ****FUNCIONES   
// funcion declarativa : lee dos veces el archivo primero para leer las funciones y la segunda para ver las ejecucaciones
suma()
function suma (){
    console.log(2+2)
}

suma();

resta()
//funcion expresiva solo ejecuta una sola vez
const resta = function (){
    console.log(4-3)
}
 resta();
 PARAMETROS PO DEFAULT
 function prueba(nombre = '', apellido ='desconocido') {  : indica que el nombre por default será vacío
 console.log(`mi nombre es ${nombre} y mi apellido es ${apellido}`)
 }

  segundo();  primero llamaos a esta funciona
 function segundo(){
     console.log('soy el segundo proceso')
     primero();    termina la instruccion llamaos a la otra funcion
 }

 function primero(){
     console.log('soy el primero')
     tercer('papa')
 }
 PRPIEDADD DE MÉTODOS
 Cuando se realizan funciones dentro de las propiedades de un objeto
 const spotify = {
    pausar: function (){
        console.log('Pausar una canción')
    },
spotify.pausar()

// Arrow functions 
La fucniones lo conviertes a flechas
const spotify = function(cantante, musica){
   return `reproducdiendo ${musica} de ${cantante}`
}
console.log(spotify('Hector Lavoe', 'yo soy el cantante'))

const spotify2 =  (cantante, musica) => `reproducdiendo ${musica} de ${musica}` // primero la flecha reemplaza la palabra function y se pone a la derecha del parametro si solo es un parámetro no es necesario es tener parántesis ( si son más de 2 parámetros si amerita parentesis), adicionalmente si solo va una actividad dentro de las llaves no amerita las llaves es más asume que se rentorna ese valor
console.log(spotify('Hector Lavoe', 'yo soy el cantante'))

Arrow function en los for each y map
// computador.forEach(producto => console.log(producto.placa))
const listaComponentes = computador.map( componente => `los modelos de placas son ${componente.placa}`)

//Arrow function en los métdos de propiedad
const spotify = {
     cancion:'',
     cancion2:'',
    pausar:() => console.log('Pausar una canción'),
    adelantar: () => console.log('Ir a la siguiente cancion'),
    set nuevaCancion(cancion){  Agregar un valor  a la propiedad
        this.cancion= cancion
        console.log(`Añaniendo nueva cancion`)
    },
    get obtenerCancion(){   obtener valor
    console.log(`la cancion agregada es ${this.cancion}`)
    }
}
spotify.cancion2= function(cancionN){
    console.log(`cancion agregada ${cancionN} `)

}

spotify.playlist = nombre => console.log(`reproducir la canción ${nombre}`)


console.log(spotify)
spotify.pausar()
spotify.playlist('Principe')

spotify.nuevaCancion = 'Asi es la visa'
spotify.obtenerCancion;

spotify.cancion2=('prueba nueva')

ESTRTUCTURA DE CONTROL
 Para los if tomar en cuenta
 if(!pago  || usuario) {  significa negativo , sifnifica o si cumpleta otra restricción OR, si es AND es con &&

 }
let pago ='tarjeta'
switch (pago){ 
    case 'efectivo':
        console.log(`${pago}`)
        break;    para que no pase a la siguiente funcion
    case 'cheque':
        console.log(`${pago}`)
        break;
    case 'tarjeta':
        tarjet()
        break;
    default :   reemplaza al else
     console.log('No has elegido el modo de pago o actualmente no tenemos el medio de pago indicado')
     break;    
}

function tarjet(){
    console.log('Se pagará con tarjeta')
}

let pago= 1000

Usar el return para que finalice la ejecución
function resultado (){
    if( pago > 400){ // tomar en cuenta que la codicion con mayor valor debería realziarse primero vieo 76
        console.log('excelente aporte')
        return;                      //el return solo lo puedes usar solo en una funcion y lo utilizar cuando no usas el else if y si ejecuta esta funcion ya no se va a la otra si quitamos el return utilizará los dos if.
        
    }if(pago> 300 ){
        console.log('muy buen aporte')
        return;  
    
    }

}

resultado();

OPERADOR TERNARIO
let pago = 300
let autenticado = false

console.log(pago === 300 ? autenticado ? 'te encuentras autenticado y tienes el monto' : 'no esta autenticado' : 'no tienes el monto')

ITERADORES
// FOR LOP - PRACTICA JUNIOR 2 con arreglo
/* producto = [
    {nombre:'placa', precio:30},
    {nombre:'fuente', precio:60},
    {nombre:'memoria', precio:15}
]
   let cantidad= producto.length;
   
    for(let i=0; i < cantidad ; i++){
       console.log(producto[i].nombre)
   } 
 */
// PREGUNTA DE TRABAJO
//BREACK: CORTA LA EJECUCIÓN DE UN FUNCION
// CONTINUE: INTERSECTA UN ELEMENTO Y CONTINUA EJECUCION
/*  CREAR UN FOR LOP QUE AL DETECTAR EL ELEMENTO 5 DETENGA LA EEJCUION 

for(let i=0; i<10 ; i++){
    if(i === 5){
        console.log('cinco')
        break;
    }
    console.log(i)
}

/*  CREAR UN FOR LOP QUE AL DETECTAR EL ELEMENTO 5 lo coloque en letras reemplace y que siga la ejecucion 

for(let i=0 ; i<10; i++){
    if(i === 5){
        console.log('cinco')
        continue;
    }
    console.log(i)
}*/

/*detecta cual es el producto que ya aderiste al carrito  tiene oferta  */

producto = [
    {nombre:'placa', precio:30 , oferta:false},
    {nombre:'fuente', precio:60, oferta:true},
    {nombre:'memoria', precio:15, oferta:true},
    {nombre:'disco', precio:20}
]

let cantidad = producto.length
for(let i=0; i<cantidad; i++){ 
    if(producto[i].oferta){
        console.log(`el producto ${producto[i].nombre} tiene descuento`)
        continue;
    }
    console.log(producto[i].nombre)
}

/*tercera practica de trabajo de for 
si es multiplo 3 fizz
si es multiplo de 5 buzz
si es multiplo de 3 y 5 fitbuz

for(let i =0; i<100; i++){
    if(i % 3 ===0 && i % 5 ===0){
        console.log(`el numero ${i} es fizzbuzz`)
    }
    else if(i % 3 ===0){
        console.log(`el numero ${i}  es fizz`)
    }
    else if(i % 5 ===0){
        console.log(`el numero ${i}  es buzz`)
    }
    
     else{
         console.log(`el numero  ${i} no es multiple de 3 o 5`)
     }
     
}*/
WHILE
numero =0;
while (numero<10){
    console.log(numero)
    numero++;

}*/
numero = 99;
do{
    console.log(numero)
    numero++;
}while(numero<10)

productos.forEach((producto, i) =>console.log(i, producto.nombre) )  // el sefundo parametro hace referencia al indice

// for of es para recorrer arreglos, mientras que for in  para recorrer propiedades del objetos
productos = [
    {nombre:'placa', precio:30},
    {nombre:'fuente', precio:60},
    {nombre:'memoria', precio:15}
]

/* for (let producto of productos){
    console.log(producto.nombre, producto.precio)
} */

producto = 
    {nombre:'placa', precio:30, stock:true}

for(let product in producto){
    console.log(producto[product])
}
for(let [llave, valor] of Object.entries(producto)){
    console.log(llave) // nueva forma para objetos S7
}

Metodos para arreglos
*some e includes
productos = [
    {nombre:'placa', precio:30},
    {nombre:'fuente', precio:60},
    {nombre:'memoria', precio:15}
]

producto = 
    ['televisor', 'radio', 'lavadora']

/* PARA VER SI ESTÁ INCLUIDO EL ELEMENTO PARA PRODUCTO BASICO SE PUEDE UTILIZAR INCLUDES MIENTRAS QUE SOME ES 
PARA PRODUCTOS VARIAS PROPIEDADES Y PARA EL BASICO
//INCLUDES
 let resultado = producto.includes('lavadora')
 console.log(resultado) */

 // SOME se puede utilizar en los casos

 let resultado = producto.some((propiedad) => propiedad === 'televisor' )
 console.log(resultado)

 let resultado2= productos.some((producto)=> producto.nombre === 'placa')
 console.log(resultado2)
 
// every : todos los elementos tienen que cumplir la condicion true o false mientras que el some basta que uno cumpla la condicion

let resultado = productos.every(producto => producto.nombre === 'placa')
console.log(resultado)




  finIndex
  /* utilizat el findIndex es para encontrar el numero de indice esta el elemento buscado */

/*  let resultado = producto.findIndex((element )=> element === 'lavadora')
 if(resultado === -1){  // el valor te bota la posisicon si es positivo o si  es negativo te bota -1
    console.log('el producto no se encuentra en la lista')
 }else{
    console.log(`el producto si esta en la lista numero ${resultado}`)
} 
let resultado = productos.findIndex((element)=> element.nombre === 'memoria')
console.log(resultado)*/

// reduce : es para sumar todos los elementos
productos = [
    {nombre:'placa', precio:30},
    {nombre:'fuente', precio:60},
    {nombre:'memoria', precio:15}
]
let totalPrecio= productos.reduce((total, producto) => total + producto.precio, 0)
console.log(totalPrecio)

  // filter : te ha im arreglo  con el filtrado realizado
let resultado = productos.filter(producto => producto.nombre !== 'placa')
console.log(resultado)

// find: encuentra solo el primer elemento que cumpla la instrucción
let resultado = productos.find(producto => producto.nombre === 'placa')
console.log(resultado)

*****DOM
Hace referencia a todo el contenido del archivo html
elemento= document; // te selecionado todo el contenido html
elemento = document.all; // te selecionado todo el contenido html incluido los meta link etc
elemento= document.head; // todo el contenido del head
elemento=document.body // todo el contenido del body
elemento = document.domain; // indica la url donde está siendo cargada
elemento = document.forms // indica los formularios tte bota una coleccion de html como s fuera un arreglo
elemento=document.forms[0].classList // Ingresando a la Coleccion de html
elemento=document.forms[0].method // ingreso al método del formulario POST
elemento=document.forms[0].id //ingreso al id del formulario
elemento=document.forms[0].action // Ingreso al action.
elemento = document.links // Ingresará a todos los enlaces
elemento = document.links[4].classList // me  bota la clases del enlace numero 4 te bota como un arreglo
elemento = document.links[4].className // te bora como un string
elemento= document.images[4].src // Ingreso  a la imagen 4 y  busco el src
console.log(elemento) 

let resultado= document.getElementsByClassName('contenedor') // te indica todos las etiquetas que tienen como clase contenedor. 
console.log(resultado)
resultado=document.getElementById('formulario') // te indica todos las etiquetas que tienen con el id fomurlario. 
console.log(resultado)

// querySelector : busca el primero que indicas por etiqueta class y id
let resultado = document.querySelector('nav') // estoy buscnado por etiqueta
console.log(resultado)

resultado= document.querySelector('.hacer .contenedor-cards .card')  // indico que estoy seleccionando el hijo del hijo del padre
console.log(resultado)

resultado=document.querySelector('section.destinos .contenedor-cards .card:nth-child(2)') // section viene ser la etiqueta donde esta la clase :nth-chil indico que  elemento saldrá.

console.log(resultado)

/* resultado = document.querySelector('.contenido-hero h1').innerText // no se mostrará si en el css colocan visibility:hidden
resultado2 = document.querySelector('.contenido-hero h1').textContent // si o si se ecnontrará pero en string
resultado3 = document.querySelector('.contenido-hero h1').innerHTML // se ha una etiqueta dentro lo muestra */

/* console.log(resultado)
console.log(resultado2)
console.log(resultado3) */

resultado4 = document.querySelector('.contenido-hero h1').textContent ='prueba' // se puede hacer con cluaiqer

let resultado = document.querySelector('.contenido-hero h1')
resultado.style.backgroundColor = 'red'

let resultado2= document.querySelector('.hacer .card')
resultado2.classList.add('nueva' , 'nueva2') // agrega clases
resultado2.classList.remove('card') // quita clases
console.log(resultado2)

let resultado = document.querySelector('.navegacion').children // una coleccion de nodos= es igualk a elementos hijos
let resultado1= document.querySelector('a').parentElement // llama al padre
let resultado2 = document.querySelector('.card').nextElementSibling // llama al hermano siguiente
let resultado3 = document.querySelector('.card:nth-child(3)').previousElementSibling // llama a un hermnano antes

let variable = document.createElement('a') // creamos un elemento
variable2.appendChild(variable) // agregamos un elemento hijo
console.log(variable2.children[2]) // identifico el a para luego colocar nuestro elemento

variable2.insertBefore(variable, variable2.children[2]) // le estoy pidieno que lo mande entes de ese elemento

variable.setAttribute('prueba', 'prueba2') // colocas un atributo
variable.onclick= miFuncion // ejecuta una funcion
let variable2= document.querySelector('.navegacion')
variable2.appendChild(variable) // agregamos un elemento hijo
console.log(variable2)


console.log(variable2.children[2]) // identifico el a para luego colocar nuestro elemento

variable2.insertBefore(variable, variable2.children[2]) // le estoy pidieno que lo mande entes de ese elemento

function miFuncion(){
    alert('probando funcion')

*****EVENTOS

document.addEventListener('DOMContentLoaded', () =>{ // se ejecuta al final  cuando el documento ya se mostró
    console.log(2)
})

const nav = document.querySelector('.navegacion')
nav.addEventListener('mouseenter', () =>{
    console.log('Pasa el mouse y ejecuto')
})

nav.addEventListener('mouseout', () => {
    console.log('ejecuto cuaando sales una vez pasado el mouse')
})

nav.addEventListener('dblclick', () => {
    console.log('ejecuto cuando sabas doble click')
})
/* nav.addEventListener('mousedown', () => {
    console.log('ejecutando como se hiciera click')
})
 */

/* nav.addEventListener('mouseup', () => {
    console.log('ejecutando cuando  dejo el click')
}) */


btnBuscar.addEventListener('keyup', () => {  // cuando presionas y sueltas la tecla
    console.log('hiciste lick')
})

btnBuscar.addEventListener('keydown', () => {  // cuando presionas  la tecla
    console.log('hiciste lick presionando la ttecla')
})

btnBuscar.addEventListener('blur', () => {  // cuando presionas fuera del input
    console.log('hiciste lick presionando fuera del input')
}) */

// existe el copy paste cut y input que funciona para todo menos para blur
btnBuscar.addEventListener('input', (e) => {  // si le colocar un parametro llama el evento input y puede sacar el valor
   // console.log(e.target.value)  te bota el valor del input
   if( e.target.value === ''){
    console.log(' el valor está vacío')
   }else{
       console.log(e.target.value)
   }
})
****** FORMULARIO
/*  const btnFormu= document.querySelector('.formulario')
 btnFormu.addEventListener('submit', (e) => {
     e.preventDefault(); // evita que realiza por defaul es decir ya no le el action que hay en el fomurlairo
     console.log('prueba') 
     console.log(e.target.action) // imprime la ruta del fomurlario (action)
 })
 */

 ******SCROOLL
 window.addEventListener('scroll', miFuncion)

function miFuncion(){
const premiun = document.querySelector('.premium')
const ubicacion= premiun.getBoundingClientRect()  // te brinda propiedas como top( los pixeles  de arriba hacía el elemento)
console.log(ubicacion) */
console.log(ubicacion)
if( ubicacion.top < 978){
    console.log('ya se ve el elemento')
}else{
    console.log('aun no se el elemento')
}
}

Event Bubbling: Se presenta cuando tanto un elemento padre 
como el elligo hay un evento, entonces cuand ose produce
el evento del elemento hijo inmediatamente ejecuta el evento del padre y es lo que no se quiere.

// vemos que el padre car ejecuta un evento, pero como titulo es un hijo de card  al dar click al titulo se ejecutara automaticamente el evento del card y eso no queremos 
// e.stopPropagation()   se utilizara ára que sol ose ejecute el evento seleccionado

// Event Bubbling: por delegación
const card = document.querySelector('.card')

card.addEventListener('click', (e) => {
    if (e.target.classList.contains('titulo')){
        console.log('este es un titulo')
    }
    if(e.target.classList.contains('precio')){
        console.log('precio')
    }
    if(e.target.classList.contains('card')){
        console.log('card')
    }
})
// Event Bubbling: por nétodo, agregar un evento mediante una funcion
/* const info= document.querySelector('.info')
console.log(info)
const titulo2= document.createElement('p')
titulo2.textContent='NUEVO TITULO2'
titulo2.onclick=miFuncion // SE LLAMA A LA FUNCIÓN
info.appendChild(titulo2) 

function miFuncion(){
    console.log('mi funcion ejecutada')
} */

// si en caso la funcion tiene parametro es neceario que se haga antes una arrow function
const info= document.querySelector('.info')
console.log(info)
const titulo2= document.createElement('p')
titulo2.textContent='NUEVO TITULO2'
titulo2.onclick= function(){ // se genera dentro deun arrow function porque sino se ejecutara sin darle click
    miFuncion(123)
}

info.appendChild(titulo2) 

function miFuncion(id){
    console.log('mi funcion ejecutada',id)
}